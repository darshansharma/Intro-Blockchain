Website - learnmeabitcoin.com

We will start with what is a bitcoin? 
Bitcoin is a cryptocurrency. 

I will not explain the basics here like what is a cryptocurrency. 
So let's directly move to what is a bitcoin network? 
Bitcoin network is like peer to peer network. Network consist of all the people who have Bitcoin client installed in their PC.
People on the network talk to each other. By talking I mean pass the information like what's going on in other parts of the 
network. 
This sharing of the information (e.g. transactions) is what allows everyone on the network to keep up to date, which is pretty 
important if you want to run a digital currency on the internet.

Seriously, anyone can join the bitcoin network. All you need is an internet connections and a bitcoin client. And once you are
up and running you'll be referred to as a NODE on the bitcoin network.

So now we know what a node is -> a computer that is running a bitcoin program.

What does a node do?
A node has 3 jobs - 
1. Follow rules.
2. Share Information.
3. Keep a copy of confirmed transactions.

1. Follow rules
Our node has some set of rules that need to be followed. By using these rules a node is able to distinguish between right and wrong transactions.
A person sending more Bitcoin than he actually posess-> Bad Transaction -> this need not to be get relayed on to other nodes.

2. A node's main job is to share information with other nodes, and this information a node shares is called transactions.
Now there are two types of transactions a node shares - fresh transactions and Confirmed transactions.
Fresh transactions - Which have recently entered the network
Confirmed transactions - Which have confirmed and shared in block of transactions not individually.

3. Keep a copy of confirmed transactions - a file called blockchain

Do I have to be a node to use bitcoin?
No, 
You just need to get the transactions in the bitcoin network and you're good to go. If you are using a web wallet they will feed the transaction on behalf of you.

Now let's delve into mining - 
Minig is a process of adding transactions to the blockchain.
Every node on the bitcoin network shares information about fresh transactions. They store these transactions in MEMORY POOL.
Every node also has a option to try and mine the transactions in MEMORY POOL in to a file. This file is ledger of every bitcoin transaction and it's called a BLOCKCHAIN.

To add a transaction from the memory pool to the blockchain, a node has to use a lot of computer processing power. The processing power is forced through a challenge in 
the memory pool.

What is this challenge? 
Okay, Imagine you're a node. At any moment in time you can condense the transaction in your memory pool in to a single "string" of numbers and letters.
Now, our objective is to hash the string with another number to get a new string that begins with certain number of zeroes. This sounds easy but is actually difficult. 
It's utterly random and winning result can only get using trial and error. And that's what minig is - lots of hashing and hoping to get lucky.
But if you are lucky enough to find a succesfull hash result, the transaction in your memory pool gets added to the blockchain and every other nodes on the network add
your block of transactions to their blockchain.

The “certain number of zeros” comes from the difficulty. This is set by the network and changes based on the volume of miners – the more people mining, the greater the difficulty 
and the more zeros are needed at the start (which makes it harder to find a winning result).

Why is minig necessary? 
Because mining allows the entire Bitcoin Network to agree on which transactions get “archived”, and this is how you prevent fraud in a digital currency.

What is the blockchain? 
The Blockchain is a file that contains a list of every bitcoin transaction ever made. Everyone on the bitcoin network shares a copy of this file, and it updates regularly with the latest
transactions.

Why is the blockchain important? 
The blockchain tells you how many bitcoins each person owns.

Why is it called the blockchain? 
Because transactions are not added to the file individually. Instead they are bunched together and added in blocks. Hence blockchain. Also these blocks are linked together so any changes 
to a block lower down the chain will change the blocks above it. So block chain.

The blocking of transactions makes it easier for everyone to share a copy of blockchain. With the internet speed we've got it is much easier to share a file that updates once every 10 min, 
than one updates a multiple times a second.

The chaining of transactions is a security feature. It makes it difficult to tamper with the blockchain without anyone noticing. 

How is blockchain shared? 
The blockchain is shared by the nodes on the bitcoin network, in the same way a video file might be shared on the BitTorrent network.

Where can I get the copy of the blockchain? 
You can get your own copy of blockchain by downloading bitcoin client. 
Once installed and running the client will connect to the network and start downloading the blockchain. It's 120+GB, so give it some time.
What? It does contain every single bitcoin transaction you know (every one since 03 Jan 2009), so 120+GB is reasonable. Also, the initial 
download of the full blockchain is a one-off thing. After that it’s smooth sailing – your blockchain updates with the latest blocks, and 
they’re only around 1MB in size.

What is a block? 
A block is a bunch of transactions that have been added to the blockchain. 
Blocks are formed by miners.

When you make a bitcoin transaction, it isn't added to the blockchain straight away. Instead it is held in a transaction pool (MEMORY POOL).
If you are a miner, your job is to gather transactions from the transaction pool in to a candidate block and to try to add this candidate block
to the blockchain. 
You can give each candidate block a BLOCK HEADER, which is basically a bunch of metadata about the block. 
Example of a block header -> version, last block, transactions, time, target.

How are blocks added to the blockchain? 
To add a candidate block to the blockchain, you hash the data in the block header and hope that the result is below a certain traget value. 
The target is calculated from the difficulty, which is a value set by the bitcoin network to regulate how difficult it is to add a block of transactions to the blockchain.
I lied. You don’t actually hash the block header on its own. You actually hash it with an extra number.
This number is called a nonce, and it’s basically a dummy field that miners use to help them get a block hash below the target value.

If the first nonce doesn’t work (starting at 0), keep incrementing it and hashing the block header. Eventually you’ll find a nonce that returns a block hash that is less than the target value.
Once you’ve found nonce that works, the block is “solved” and all of the transactions in this block are added to the blockchain.

What is the difficulty? 
The difficulty is a number that regulates how long it takes for miners to add new blocks of transactions to the blockchain.

The difficulty values updates every 2 weeks to ensure that it takes 10 minutes (on average) to add new blocks to the blockchain. 
The difficulty adjusts every 2016 blocks (roughly every 2 weeks).

What is a bitcoin transaction? 
A bitcoin transaction is a bunch of data.
This data contains information about the amount being sent, the account it is being sent from, and the account it is being sent to.

And when you make transaction you send this transaction data in to the bitcoin network.
Eventually one of the nodes on the network will mine your transaction in to a block, and this block (with your transaction in it) will be added to the file of confirmed transactions (the blockchain).

And that’s all a bitcoin transaction is – feeding a simple line of data in to the bitcoin network and waiting for it to be mined in to the blockchain.

How does a bitcoin transaction work? 
A bitcoin address is like an accoutnt number that holds bitcoin. 
But when you make a transaction, it's not like taking an exact number of coins out of a pot and moving them to another.
Instead, an address keeps track of each individual transaction it has received:

So when you want to send bitcoins to someone else, you grab whole amounts that you have already received, and use them to send a new amount to a new address:

And when that someone else wants to send bitcoins to another person, they will use up the whole amounts they have received in the same way:
So in effect you receive bitcoins in batches, and you use those batches to create new batches to send to other people.
That’s how transactions work.

“What if the total of the batches adds up to more than I want to send?”
Good question sir. In this instance (which it often is), you just add another output to the transaction and send the difference back to yourself:
This may seem awkward at first, I know, but it’s a precise way of doing it from a programming perspective, so get used to it.

What prevents someone else from spending my bitcoins?
Because, each of the transaction outputs has a lock..
And if you create a transaction without first unlocking these outputs, nodes on the bitcoin network will reject the transaction.
But fortunately for you, your bitcoin address comes with a private key.

So if you want to send bitcoins somewhere, you use this private key to unlock the outputs located at your address.
After unlocking all of the outputs you want to use, the transaction will be accepted and propagated by nodes on the bitcoin network.

And that’s how bitcoin transactions work.

Understanding Transactions - 

Transaction -1 
Let’s begin this story of transactions with the birth of a fresh batch of bitcoins…
You are mining bitcoins on your own. By some miracle, you have managed to mine a block of transactions and earn yourself a fresh batch of 25 bitcoins.
Naturally, your first instinct is to celebrate. So let’s use 1 of these bitcoins to buy some beer.
Now, your other first instinct would be to take 1 of these bitcoins (from the batch of 25) to pay for this beer. This would make sense, but it’s not how transactions work.

Instead, we have to send the entire batch of 25 bitcoins in the transaction.

But to make sure we don’t spend all 25 bitcoins in a “1 bitcoin” payment, we split the batch up and send it to two destinations:

1. The beer shop. (the payment)
2. Back to our own address. (our change)
It’s a bit of an around-the-houses way of doing it, but it achieves the same end-result.

So it’s just like we took 1 bitcoin from our address and sent it to another address… but now we know what really happened.

Transaction 2 - Using outputs as inputs.
Okay, from now on we’re going to use the word “output” instead of “batch”.
Anyway, a few days have passed since the beer shop sold us that beer. And judging by the current state of their bitcoin address, the beer business is booming.
But as we all know, beer doesn’t grow on trees. So the beer shop is on the lookout for a brand new beer machine.
Oh look, a lovely beer machine for the low low price of 4.2 bitcoins.

The beer shop doesn’t have a single output (batch) at their address to cover the cost of the beer machine (4.2). So instead, we gather a handful of outputs together to get a total greater than 4.2.
When we construct a transaction, the outputs we are gathering up to be spent are referred to as the transaction “inputs”.

Using the total input of 4.5, the beer shop creates two new outputs of 4.2 and 0.3.
Once again, the outputs that were used as inputs have been “spent”, and can’t be used again.

The “unspent” outputs however are still good for spending, so we call these the unspent transaction outputs (UTXOs).
The total number of bitcoins at an address is the sum of the address’s UTXOs.

Transaction 3 - Transaction Fee
Ah yes, we’ve not included a transaction fee in either of the last two transactions. Oops-a-diddly.
Without a transaction fee, those two transactions will probably take a while to get included in to a block. This is because a transaction fee gives your transaction priority.
The transaction fees are picked up by miners when they mine a block, so adding a transaction fee basically acts as an incentive for miners to include your transaction in a block.

What is an output lock? 
An output lock is set of requirements placed on output. These requirements must be met to be able to use the output in a transaction.
It’s these locks that prevent us from spending each other’s outputs in a transaction, as every output we receive is encumbered by a lock.

Where do output locks come from? 
As we know, a transaction is the process of taking existing outputs and creating new ones from them.
And it’s during the creation of these outputs that we give each one a “lock”.
So when we want to send bitcoins to a friend, we create the new output, and add a lock that says “only the owner of 1friend1234567890 can use this output”.
As a result, this new output will effectively “belong” to our friend, because they are the only person who has the private key for this address, so nobody else will be able to spend it.

As you may have noticed, you’re never really “sending” bitcoins in a transaction.
Instead, you’re constructing a transaction that creates new outputs (with new locks), sending this transaction data in to the bitcoin network, and waiting for it to get mined in to the blockchain.
So even though the blockchain is file of transactions, on a practical level you can think of it as a storage unit for outputs.
And when you want to send “your” bitcoins to someone, you simply refer to the outputs in the blockchain that you are able to unlock:

And when this transaction gets mined in to the blockchain, the outputs you used (as inputs) will not be able to be used again.

How do you create an output lock?
Output locks are written in a basic programming language, called SCRIPT.

Now, the most interesting part of this locking script is CHECKPRIVATEKEY, which is a function that we use to help set the requirements for the lock.
So for this particular output, we’ve set a lock that wants to compare the address 1EUXSxuUVy2PC5enGXR1a3yxbEjNWMHuem with a private key.
If we can provide this lock with a matching private key, we can unlock it and use it in a transaction.

How do you unlock an output lock?
When you construct the transaction data, you include an “unlocking script” after each output you intend to use:
So for example, to unlock a typical locking script (e.g. [address][CHECKPRIVATEKEY]), we need to prove that we own the address [address]. To do this, we use our private key to create a digital signature.
If everything is cool, the node accepts the transaction and passes it on to other nodes, who will each in turn run the “locking”+“unlocking” script before accepting the transaction.
You see, to save us from giving our private key away within the transaction data, we create something called a “digital signature”:























